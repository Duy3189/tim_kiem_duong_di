import tkinter as tk
from tkinter import messagebox

class PartInfoUI:
    def __init__(self, parent, n=8):
        self.parent = parent
        self.n = n
        self.partial_goal = {}
        self.result_callback = None
        self.create_widgets()
    
    def create_widgets(self):
        """T·∫°o giao di·ªán nh·∫≠p partial goal"""
        self.window = tk.Toplevel(self.parent)
        self.window.title("Nh·∫≠p th√¥ng tin m·ªôt ph·∫ßn")
        self.window.geometry("450x500")
        self.window.transient(self.parent)
        self.window.grab_set()
        
        # Ti√™u ƒë·ªÅ
        title_label = tk.Label(self.window, 
                              text="NH·∫¨P TH√îNG TIN ƒê√É BI·∫æT", 
                              font=("Arial", 16, "bold"),
                              fg="#2E86AB")
        title_label.pack(pady=15)
        
        # Gi·∫£i th√≠ch
        explain_label = tk.Label(self.window, 
                                text="Nh·∫≠p v·ªã tr√≠ c·ªôt (0-7) cho c√°c h√†ng b·∫°n ƒë√£ bi·∫øt:\n‚Ä¢ ƒê·ªÉ tr·ªëng n·∫øu kh√¥ng bi·∫øt v·ªã tr√≠\n‚Ä¢ Ch·ªâ nh·∫≠p s·ªë t·ª´ 0 ƒë·∫øn 7",
                                font=("Arial", 11),
                                justify=tk.CENTER,
                                fg="#555555")
        explain_label.pack(pady=10)
        
        # Frame cho b·∫£ng nh·∫≠p li·ªáu
        table_frame = tk.Frame(self.window)
        table_frame.pack(pady=15)
        
        # Ti√™u ƒë·ªÅ b·∫£ng
        header_frame = tk.Frame(table_frame)
        header_frame.pack()
        
        tk.Label(header_frame, text="H√†ng", width=8, font=("Arial", 11, "bold")).pack(side=tk.LEFT, padx=5)
        tk.Label(header_frame, text="C·ªôt", width=8, font=("Arial", 11, "bold")).pack(side=tk.LEFT, padx=5)
        tk.Label(header_frame, text="", width=15).pack(side=tk.LEFT)  # placeholder
        
        # T·∫°o b·∫£ng nh·∫≠p li·ªáu
        self.entries = {}
        for i in range(self.n):
            row_frame = tk.Frame(table_frame)
            row_frame.pack(pady=4)
            
            tk.Label(row_frame, text=f"{i}", width=8, font=("Arial", 10)).pack(side=tk.LEFT)
            entry = tk.Entry(row_frame, width=8, font=("Arial", 10), justify=tk.CENTER, bg="#F8F9FA")
            entry.pack(side=tk.LEFT, padx=5)
            self.entries[i] = entry
            
            # Hi·ªÉn th·ªã tr·∫°ng th√°i
            status_label = tk.Label(row_frame, text="(ch∆∞a nh·∫≠p)", font=("Arial", 9), fg="#888888", width=15)
            status_label.pack(side=tk.LEFT)
            
            # Li√™n k·∫øt s·ª± ki·ªán thay ƒë·ªïi
            entry.bind('<KeyRelease>', lambda e, row=i, label=status_label: self.update_status(row, label))
        
        # Frame cho c√°c t√πy ch·ªçn nhanh
        quick_frame = tk.Frame(self.window)
        quick_frame.pack(pady=20)
        
        tk.Label(quick_frame, text="T√πy ch·ªçn nhanh:", font=("Arial", 12, "bold")).pack()
        
        quick_btn_frame = tk.Frame(quick_frame)
        quick_btn_frame.pack(pady=8)
        
        tk.Button(quick_btn_frame, text="D·ªÖ - 1 qu√¢n h·∫≠u", 
                 command=lambda: self.set_difficulty("easy"),
                 bg="#28A745", fg="white", font=("Arial", 10),
                 width=15).pack(side=tk.LEFT, padx=5)
        
        tk.Button(quick_btn_frame, text="Trung b√¨nh - 2 qu√¢n h·∫≠u", 
                 command=lambda: self.set_difficulty("medium"),
                 bg="#FFC107", fg="black", font=("Arial", 10),
                 width=18).pack(side=tk.LEFT, padx=5)
        
        tk.Button(quick_btn_frame, text="Kh√≥ - 3 qu√¢n h·∫≠u", 
                 command=lambda: self.set_difficulty("hard"),
                 bg="#DC3545", fg="white", font=("Arial", 10),
                 width=15).pack(side=tk.LEFT, padx=5)
        
        # N√∫t ƒëi·ªÅu khi·ªÉn
        btn_frame = tk.Frame(self.window)
        btn_frame.pack(pady=20)
        
        tk.Button(btn_frame, text="üîç B·∫ÆT ƒê·∫¶U T√åM KI·∫æM", 
                 command=self.confirm,
                 bg="#2E86AB", fg="white", font=("Arial", 12, "bold"),
                 width=20, height=2).pack(side=tk.LEFT, padx=10)
        
        tk.Button(btn_frame, text="‚ùå H·ª¶Y", 
                 command=self.cancel,
                 bg="#6C757D", fg="white", font=("Arial", 11),
                 width=10, height=2).pack(side=tk.LEFT, padx=5)
        
        tk.Button(btn_frame, text="üóëÔ∏è X√ìA T·∫§T C·∫¢", 
                 command=self.clear_all,
                 bg="#FD7E14", fg="white", font=("Arial", 11),
                 width=12, height=2).pack(side=tk.LEFT, padx=5)
    
    def update_status(self, row, label):
        """C·∫≠p nh·∫≠t tr·∫°ng th√°i khi ng∆∞·ªùi d√πng nh·∫≠p li·ªáu"""
        value = self.entries[row].get().strip()
        if value:
            if value.isdigit() and 0 <= int(value) < self.n:
                label.config(text="‚úì ƒë√£ nh·∫≠p", fg="#28A745")
            else:
                label.config(text="‚ùå l·ªói", fg="#DC3545")
        else:
            label.config(text="(ch∆∞a nh·∫≠p)", fg="#888888")
    
    def set_difficulty(self, difficulty):
        """Thi·∫øt l·∫≠p ƒë·ªô kh√≥"""
        from part_infor import generate_smart_partial_goal
        self.partial_goal = generate_smart_partial_goal(self.n, difficulty)
        self.update_entries()
        
        # Hi·ªÉn th·ªã th√¥ng b√°o
        num_queens = len(self.partial_goal)
        messagebox.showinfo("Thi·∫øt l·∫≠p ƒë·ªô kh√≥", 
                           f"ƒê√£ thi·∫øt l·∫≠p {difficulty.upper()}:\n{num_queens} qu√¢n h·∫≠u ƒë√£ ƒë∆∞·ª£c c·ªë ƒë·ªãnh")
    
    def update_entries(self):
        """C·∫≠p nh·∫≠t c√°c √¥ nh·∫≠p li·ªáu t·ª´ partial goal"""
        # X√≥a t·∫•t c·∫£ c√°c √¥ nh·∫≠p li·ªáu tr∆∞·ªõc
        self.clear_all()
        
        # ƒêi·ªÅn c√°c gi√° tr·ªã t·ª´ partial goal
        for row, col in self.partial_goal.items():
            self.entries[row].delete(0, tk.END)
            self.entries[row].insert(0, str(col))
    
    def clear_all(self):
        """X√≥a t·∫•t c·∫£ c√°c √¥ nh·∫≠p li·ªáu"""
        for entry in self.entries.values():
            entry.delete(0, tk.END)
        self.partial_goal = {}
    
    def confirm(self):
        """X√°c nh·∫≠n nh·∫≠p li·ªáu v√† b·∫Øt ƒë·∫ßu t√¨m ki·∫øm"""
        self.partial_goal = {}
        has_error = False
        error_message = ""
        
        for row, entry in self.entries.items():
            value = entry.get().strip()
            if value:
                try:
                    col = int(value)
                    if 0 <= col < self.n:
                        self.partial_goal[row] = col
                    else:
                        error_message = f"L·ªói: C·ªôt ph·∫£i trong kho·∫£ng 0-{self.n-1} (h√†ng {row})"
                        has_error = True
                        break
                except ValueError:
                    error_message = f"L·ªói: Gi√° tr·ªã ·ªü h√†ng {row} ph·∫£i l√† s·ªë nguy√™n"
                    has_error = True
                    break
        
        if has_error:
            messagebox.showerror("L·ªói nh·∫≠p li·ªáu", error_message)
            return
        
        if len(self.partial_goal) == 0:
            # N·∫øu kh√¥ng nh·∫≠p g√¨, h·ªèi ng∆∞·ªùi d√πng
            result = messagebox.askyesno("X√°c nh·∫≠n", 
                                        "B·∫°n ch∆∞a nh·∫≠p th√¥ng tin n√†o.\n\nC√≥ mu·ªën s·ª≠ d·ª•ng thi·∫øt l·∫≠p m·∫∑c ƒë·ªãnh (2 qu√¢n h·∫≠u) kh√¥ng?")
            if result:
                from part_infor import generate_smart_partial_goal
                self.partial_goal = generate_smart_partial_goal(self.n, "medium")
            else:
                return
        
        print(f"Th√¥ng tin ƒë√£ nh·∫≠p: {self.partial_goal}")
        messagebox.showinfo("Th√¥ng tin", f"B·∫Øt ƒë·∫ßu t√¨m ki·∫øm v·ªõi {len(self.partial_goal)} qu√¢n h·∫≠u ƒë√£ bi·∫øt!")
        self.window.destroy()
        
        # G·ªçi callback ƒë·ªÉ ch·∫°y thu·∫≠t to√°n
        if self.result_callback:
            self.result_callback(self.partial_goal)
    
    def cancel(self):
        """H·ªßy b·ªè"""
        self.partial_goal = None
        self.window.destroy()
        messagebox.showinfo("H·ªßy", "ƒê√£ h·ªßy nh·∫≠p th√¥ng tin")
    
    def set_callback(self, callback):
        """Thi·∫øt l·∫≠p callback khi ho√†n th√†nh"""
        self.result_callback = callback

def open_part_info_ui(parent, callback):
    """M·ªü giao di·ªán Part Information UI"""
    ui = PartInfoUI(parent)
    ui.set_callback(callback)
    return ui